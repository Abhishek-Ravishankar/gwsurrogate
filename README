Welcome to gwsurrogate!
-----------------------

gwsurrogate is an easy interface to gravitational wave surrogate models.

Surrogates provide a fast and accurate evaluation mechanism for gravitational
waveforms which would otherwise be found through solving differential 
equations. These equations must be solved in the ``building" phase, which 
was performed using other codes. For details on surrogate building see:

[1] Scott Field, Chad Galley, Jan Hesthaven, Jason Kaye, and Manuel Tiglio. 
``Fast prediction and evaluation of gravitational waveforms using surrogate models‚Äù 
arXiv: gr-qc:1308.3565

[2] ROM WEBSITE HERE



Getting Started
---------------

All instructions below assume you have loaded gwsurrogate:

1) startup ipython
2) 'import gwsurrogate as gw'
3) view docstring instructions 'gw?'


surrogate.py
------------

Defines the class SurrogateGW. This low-level class is useful for 
loading, evaluating and plotting surrogate models as they are exported
from the surrogate building code. As such, these surrogates are limited 
to a fixed total mass and sampling rate. Evaluations are provided for by 
specifcying any value of mass ratio q which lies within the range 
for which the surrogate is valid. To use:

1) EOB = gw.SurrogateGW('EOBNRv2/q1_2.rate2048.cycles67/')

2) EOB.plot(q_eval=1.2)


LALsurrogate.py
---------------
Defines the class LALSurrogateEOB. Similar to SurrogateGW excpet that 
surrogates can be generated from interpolants for waveforms with different 
total masses while sampled at the same rate. [NOTE: Unnormalized amplitude 
dependence on parameters is not yet implemented.] To use:


1) Import the routines from "import EvaluateSurrogate_v2" or "from EvaluateSurrogate_v2 import *"

To interpolate the matrix of reduced basis functions:

1) Create instance of InterpolateB class. Must pass location of data files upon initialization, e.g., "interp = InterpolateB('SurrogateQ1to2/')"

2) Generate and save basis function interpolants to hdf5 format with "interp.save_interp('SurrogateQ1to2/')". Options include compressQ, which if True will compress the data using gzip and if False will do no compression. Interpolants will be stored in 'SurrogateQ1to2/B_interp.hdf5'.


To generate an EOB surrogate waveform for a given total mass Mtot and mass ratio q:

1) Create instance of LALSurrogateEOB class. Must pass location of data files upon initialization, e.g., "eob = LALSurrogateEOB('SurrogateQ1to2/')"

2) Generate EOB waveforms by specifying a q and Mtot value (in solar masses), e.g., "t, hp, hc = eob(1.2, 60.)"

3) Plot the same EOB waveform with, e.g., "eob.plot_surrogate(1.2, 60.)"

4) Plot multiple surrogate waveforms with, e.g., "eob.plot_surrogates([[1.2, 60.], [1.2, 80.], [1.2, 100.]])". Options "hpQ" and "hcQ" allow for the plus and/or cross polarizations to be plotted. Default values are "hpQ=True", "hcQ=False".
