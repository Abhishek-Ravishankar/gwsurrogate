Welcome to gwsurrogate!
-----------------------

gwsurrogate is an easy interface to gravitational wave surrogate models.

Surrogates provide a fast and accurate evaluation mechanism for gravitational
waveforms which would otherwise be found through solving differential 
equations. These equations must be solved in the ``building" phase, which 
was performed using other codes. For details on surrogate building see:

[1] Scott Field, Chad Galley, Jan Hesthaven, Jason Kaye, and Manuel Tiglio. 
``Fast prediction and evaluation of gravitational waveforms using surrogate models‚Äù 
arXiv: gr-qc:1308.3565

[2] ROM WEBSITE HERE



Getting Started
---------------

All instructions below assume you have loaded gwsurrogate:

1) startup ipython
2) 'import gwsurrogate as gw'
3) view docstring instructions 'gw?'

(Additional examples for text and hdf5 based surrogates can be 
found in the accompanying ipython notebooks.)


surrogate.py
------------

Defines the classes HDF5Surrogate and TextSurrogate. These are 
low-level classes for loading, evaluating and plotting 
surrogate models (stored as text or hdf5 data files) 
as they are exported from the surrogate building code. 
As such, these surrogates are limited to a fixed sampling rate. 
Evaluations are provided for by specifcying any value of mass 
ratio q which lies within the range for which the surrogate is valid. 

For example, to load and plot a (3,3)-mode surrogate valid for mass
ratios between 1 and 2, and of length about 12,000M:

1) EOB = gw.TextSurrogate('EOBNRv2/EOBNRv2_q1_2_NoSpin_SingleModes/l3_m3_len12241M_SurID15poly/')

2) EOB.plot(1.2)


Surrogate data formats and gwsurrogate functions
================================================

1) Folder name to instantiate Surrogate class:

MODELNAME_q[QMIN]_[QMAX]_NoSpin_[Multi(Single)]Mode/l[ELL]_m[M]_len[TIME]M_SurID[RBDIM]poly

(MODELNAME = "EOBNRv2", for example) and quantities in [] are determined by the surrogate settings

2) metadata.txt or info.data contains a description of the surrogate and its generation

3) HDF5/TXT contents: ( h+ - i hx = Ae^{-i phi} )
	SurrogateID (string, repeat parent directory name)
	B (complex matrix, basis-by-times)
	eim_indices (array of integers, labeled from 0)
	greedy_points (ordered by their selection)
	tmin, tmax, dt. (Text surrogates store these in time_info.txt)
	qmin_fit, qmax_fit (range used for fitting).
	affine_map = True, False (Boolean; whether affine map to reference interval was used; use as flag for evaluating fits)
	fit_coeff_amp 
	fit_coeff_phase (coefficients of fitting functions; eim_indices-by-coefficients)
	V (not its inverse; to reconstruct the rb.basis, E = B V)
	R (matrix of coefficients relating basis and waveforms, H = E R)
	

Text-based surrogates
=====================

All text-based surrogates should come as .tar.gz. To create/extra new ones use

tar -cvzf SURROGATE_NAME.tar.gz SURROGATE_NAME/	
tar -xvzf SURROGATE_NAME.tar.gz




==== NOTES BELOW THIS LINE ARE OUTDATED, KEEP FOR NOW =======


LALsurrogate.py
---------------
Defines the class LALSurrogateEOB. Similar to SurrogateGW excpet that 
surrogates can be generated from interpolants for waveforms with different 
total masses while sampled at the same rate. [NOTE: Unnormalized amplitude 
dependence on parameters is not yet implemented.] To use:


1) Import the routines from "import EvaluateSurrogate_v2" or "from EvaluateSurrogate_v2 import *"

To interpolate the matrix of reduced basis functions:

1) Create instance of InterpolateB class. Must pass location of data files upon initialization, e.g., "interp = InterpolateB('SurrogateQ1to2/')"

2) Generate and save basis function interpolants to hdf5 format with "interp.save_interp('SurrogateQ1to2/')". Options include compressQ, which if True will compress the data using gzip and if False will do no compression. Interpolants will be stored in 'SurrogateQ1to2/B_interp.hdf5'.


To generate an EOB surrogate waveform for a given total mass Mtot and mass ratio q:

1) Create instance of LALSurrogateEOB class. Must pass location of data files upon initialization, e.g., "eob = LALSurrogateEOB('SurrogateQ1to2/')"

2) Generate EOB waveforms by specifying a q and Mtot value (in solar masses), e.g., "t, hp, hc = eob(1.2, 60.)"

3) Plot the same EOB waveform with, e.g., "eob.plot_surrogate(1.2, 60.)"

4) Plot multiple surrogate waveforms with, e.g., "eob.plot_surrogates([[1.2, 60.], [1.2, 80.], [1.2, 100.]])". Options "hpQ" and "hcQ" allow for the plus and/or cross polarizations to be plotted. Default values are "hpQ=True", "hcQ=False".
